# The official Canonical Ubuntu Focal image is ideal from a security perspective,
# especially for the enterprises that we, the RabbitMQ team, have to deal with
FROM ubuntu:20.04 AS build-base

# Install dependencies required to build OpenSSL and Erlang/OTP from source
# https://erlang.org/doc/installation_guide/INSTALL.html
# https://github.com/openssl/openssl/blob/master/INSTALL.md
# gnupg: Required to verify OpenSSL artefacts
# autoconf: Required to configure Erlang/OTP before compiling
# dpkg-dev: Required to set up host & build type when compiling Erlang/OTP
# libncurses5-dev: Required for Erlang/OTP new shell & observer_cli - https://github.com/zhongwencool/observer_cli

RUN apt-get update && apt-get install --yes --no-install-recommends \
	autoconf \
	build-essential \
	ca-certificates \
	dpkg-dev \
	gnupg \
	libncurses5-dev \
	pkg-config \
	wget

FROM build-base AS openssl-builder

# Default to a PGP keyserver that pgp-happy-eyeballs recognizes, but allow for substitutions locally
ARG PGP_KEYSERVER=keyserver.ubuntu.com
# If you are building this image locally and are getting `gpg: keyserver receive failed: No data` errors,
# run the build with a different PGP_KEYSERVER, e.g. docker build --tag rabbitmq:{{ env.version }} --build-arg PGP_KEYSERVER=pgpkeys.eu {{ env.version }}/ubuntu
# For context, see https://github.com/docker-library/official-images/issues/4252

ENV OPENSSL_VERSION {{ .openssl.version }}
ENV OPENSSL_SOURCE_SHA256 {{ .openssl.sha256 }}
ENV OPENSSL_SOURCE_URL https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz
ENV OPENSSL_SOURCE_PATH /usr/local/src/openssl-$OPENSSL_VERSION
ENV OPENSSL_CONFIG_DIR /usr/local/etc/ssl
# https://www.openssl.org/community/omc.html
# TODO auto-generate / scrape this list from the canonical upstream
# source instead (check the signature file and add an entry in the
# .openssl object with just the one signature that we expect to have
# signed this release, after cross-referencing the official OMC list?)
ENV OPENSSL_PGP_KEY_IDS="{{
[
	# Matt Caswell
	"8657 ABB2 60F0 56B1 E519 0839 D9C4 D26D 0E60 4491",
	# Mark J. Cox
	"5B25 45DA B219 95F4 088C EFAA 36CE E4DE B00C FE33",
	# Paul Dale
	"ED23 0BEC 4D4F 2518 B9D7 DF41 F0DB 4D21 C1D3 5231",
	# Tim Hudson
	"C1F3 3DD8 CE1D 4CC6 13AF 14DA 9195 C482 41FB F7DD",
	# Richard Levitte
	"7953 AC1F BC3D C8B3 B292 393E D5E9 E43F 7DF9 EE8C",
	# Kurt Roeckx
	"E5E5 2560 DD91 C556 DDBD A5D0 2064 C536 41C2 5E5D"
]
| map("0x" + gsub(" "; "")) | join(" ")
}}"

WORKDIR $OPENSSL_SOURCE_PATH

RUN wget --progress dot:giga --output-document "$OPENSSL_SOURCE_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc" && \
	wget --progress dot:giga --output-document "$OPENSSL_SOURCE_PATH.tar.gz" "$OPENSSL_SOURCE_URL"

RUN set -eux; \
	export GNUPGHOME="$(mktemp -d)"; \
	for key in $OPENSSL_PGP_KEY_IDS; do \
		gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$key"; \
	done; \
	gpg --batch --verify "$OPENSSL_SOURCE_PATH.tar.gz.asc" "$OPENSSL_SOURCE_PATH.tar.gz"; \
	gpgconf --kill all; \
	echo "$OPENSSL_SOURCE_SHA256 *$OPENSSL_SOURCE_PATH.tar.gz" | sha256sum --check --strict -

RUN tar --extract --file "$OPENSSL_SOURCE_PATH.tar.gz" --strip-components 1

# Configure OpenSSL for compilation
#
# Without specifying "--libdir", Erlang will fail during "crypto:supports()"
# looking for a "pthread_atfork" function that doesn't exist (but only on
# arm32v7/armhf??)
#
# add -rpath to avoid conflicts between our OpenSSL's "libssl.so" and the
# libssl package by making sure /usr/local/lib is searched first (but only for
# Erlang/OpenSSL to avoid issues with other tools using libssl;
# https://github.com/docker-library/rabbitmq/issues/364)

RUN set -eux; \
	DEB_HOST_MULTIARCH="$(dpkg-architecture --query DEB_HOST_MULTIARCH)"; \
	DEB_BUILD_GNU_CPU="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"; \
	DEB_BUILD_GNU_TYPE="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
	RELEASE="4.x.y-z" SYSTEM='Linux' \
	MACHINE="$DEB_BUILD_GNU_CPU" BUILD="$DEB_BUILD_GNU_TYPE" ./config \
		--openssldir="$OPENSSL_CONFIG_DIR" \
		--libdir="lib/$DEB_HOST_MULTIARCH" \
		-Wl,-rpath=/usr/local/lib; \
	make -j "$(getconf _NPROCESSORS_ONLN)"; \
	make install_sw install_ssldirs

RUN set -eux; \
	ldconfig; \
	rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private"; \
	ln -vsf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR"; \
	openssl version

FROM openssl-builder AS erlang-builder

ENV OTP_VERSION {{ .otp.version }}
# TODO add PGP checking when the feature will be added to Erlang/OTP's build system
# https://erlang.org/pipermail/erlang-questions/2019-January/097067.html
ENV OTP_SOURCE_SHA256 {{ .otp.sha256 }}
ENV OTP_SOURCE_URL https://github.com/erlang/otp/releases/download/OTP-$OTP_VERSION/otp_src_$OTP_VERSION.tar.gz
ENV OTP_SOURCE_PATH /usr/local/src/otp-$OTP_VERSION

# Download, verify & extract OTP_SOURCE
WORKDIR $OTP_SOURCE_PATH

RUN set -eux; \
	wget --progress dot:giga --output-document "$OTP_SOURCE_PATH.tar.gz" "$OTP_SOURCE_URL"; \
	echo "$OTP_SOURCE_SHA256 *$OTP_SOURCE_PATH.tar.gz" | sha256sum --check --strict -; \
	tar --extract --file "$OTP_SOURCE_PATH.tar.gz" --strip-components 1

# Configure Erlang/OTP for compilation, disable unused features & applications
#
# https://erlang.org/doc/applications.html
#
# ERL_TOP is required for Erlang/OTP makefiles to find the absolute path for
# the installation
#
# add -rpath to avoid conflicts between our OpenSSL's "libssl.so" and the
# libssl package by making sure /usr/local/lib is searched first (but only for
# Erlang/OpenSSL to avoid issues with other tools using libssl;
# https://github.com/docker-library/rabbitmq/issues/364)
#
# JIT is only supported on amd64 (until 24.x+1, where it will support arm64 as well)
# https://github.com/erlang/otp/blob/OTP-24.0.5/erts/configure#L21694-L21709 / https://github.com/erlang/otp/pull/4869
RUN set -eux; \
	export ERL_TOP="$OTP_SOURCE_PATH"; \
	export CFLAGS="$(dpkg-buildflags --get CFLAGS) -Wl,-rpath=/usr/local/lib"; \
	DEB_HOST_GNU_TYPE="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)"; \
	DEB_BUILD_GNU_TYPE="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
	DEB_ARCH="$(dpkg --print-architecture)"; DEB_ARCH="${DEB_ARCH##*-}"; \
	jitFlag=; \
	case "$DEB_ARCH" in \
		amd64) jitFlag='--enable-jit' ;; \
	esac; \
	./configure \
		--host="$DEB_HOST_GNU_TYPE" \
		--build="$DEB_BUILD_GNU_TYPE" \
		--disable-dynamic-ssl-lib \
		--disable-hipe \
		--disable-sctp \
		--disable-silent-rules \
		--enable-clock-gettime \
		--enable-hybrid-heap \
		--enable-kernel-poll \
		--enable-shared-zlib \
		--enable-smp-support \
		--enable-threads \
		--with-microstate-accounting=extra \
		--without-common_test \
		--without-debugger \
		--without-dialyzer \
		--without-diameter \
		--without-edoc \
		--without-erl_docgen \
		--without-et \
		--without-eunit \
		--without-ftp \
		--without-hipe \
		--without-jinterface \
		--without-megaco \
		--without-observer \
		--without-odbc \
		--without-reltool \
		--without-ssh \
		--without-tftp \
		--without-wx \
		$jitFlag

# Compile and install Erlang/OTP
RUN set -eux; \
	make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing"; \
	make install

# Remove extra dirs
RUN set -eux; \
	find /usr/local/lib/erlang -type d -name examples -exec rm -rf '{}' +; \
	find /usr/local/lib/erlang -type d -name src -exec rm -rf '{}' +; \
	find /usr/local/lib/erlang -type d -name include -exec rm -rf '{}' +

# Check that OpenSSL still works
# Check that Erlang/OTP crypto & ssl were compiled against OpenSSL correctly
RUN set -eux; \
	openssl version; \
	erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'

FROM ubuntu:20.04

# Use the latest stable RabbitMQ release (https://www.rabbitmq.com/download.html)
ENV RABBITMQ_VERSION {{ .version }}
# https://www.rabbitmq.com/signatures.html#importing-gpg
ENV RABBITMQ_PGP_KEY_ID="0x0A9AF2115F4687BD29803A206B73A36E6026DFCA"
ENV RABBITMQ_HOME=/opt/rabbitmq
ENV RABBITMQ_DATA_DIR /var/lib/rabbitmq
ENV PATH $RABBITMQ_HOME/sbin:$PATH

# warning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (which can be verified by running "locale" in your shell)
# Setting all environment variables that control language preferences, behaviour differs - https://www.gnu.org/software/gettext/manual/html_node/The-LANGUAGE-variable.html#The-LANGUAGE-variable
# https://docs.docker.com/samples/library/ubuntu/#locales
ENV LANG=C.UTF-8 LANGUAGE=C.UTF-8 LC_ALL=C.UTF-8

COPY --from=erlang-builder /usr/local/bin/ /usr/local/bin/
COPY --from=erlang-builder /usr/local/etc/ssl/ /usr/local/etc/ssl/
COPY --from=erlang-builder /usr/local/lib/ /usr/local/lib/

RUN set -eux; \
# Install dependencies required to run Erlang/OTP
# https://erlang.org/doc/installation_guide/INSTALL.html
# grab gosu for easy step-down from root
# Bring in tzdata so users could set the timezones through the environment
	export DEBIAN_FRONTEND=noninteractive; \
	apt-get update; \
	apt-get install --yes --no-install-recommends \
		ca-certificates \
		gnupg \
		gosu \
		tzdata \
		wget \
		xz-utils \
	; \
	rm -rf /var/lib/apt/lists/*; \
	\
# verify that the "gosu" binary works
	gosu nobody true; \
	\
# Configure OpenSSL to use system certs
	ln -vsf /etc/ssl/certs /etc/ssl/private /usr/local/etc/ssl; \
	\
# Create rabbitmq system user & group, fix permissions & allow root user to connect to the RabbitMQ Erlang VM
	groupadd --gid 999 --system rabbitmq; \
	useradd --uid 999 --system --home-dir "$RABBITMQ_DATA_DIR" --gid rabbitmq rabbitmq; \
	mkdir -p "$RABBITMQ_DATA_DIR" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq; \
	chown -fR rabbitmq:rabbitmq "$RABBITMQ_DATA_DIR" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq; \
	chmod 777 "$RABBITMQ_DATA_DIR" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq; \
	ln -sf "$RABBITMQ_DATA_DIR/.erlang.cookie" /root/.erlang.cookie; \
	\
# Install RabbitMQ
	RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION"; \
	RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-latest-toolchain-$RABBITMQ_VERSION.tar.xz"; \
	wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc"; \
	wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL"; \
	\
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$RABBITMQ_PGP_KEY_ID"; \
	gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz"; \
	gpgconf --kill all; \
	rm -rf "$GNUPGHOME"; \
	\
	mkdir -p "$RABBITMQ_HOME"; \
	tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "$RABBITMQ_HOME" --strip-components 1; \
	rm -f "$RABBITMQ_PATH"*; \
# Do not default SYS_PREFIX to RABBITMQ_HOME, leave it empty
	grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults"; \
	sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "$RABBITMQ_HOME/sbin/rabbitmq-defaults"; \
	grep -qE '^SYS_PREFIX=$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults"; \
	chown -R rabbitmq:rabbitmq "$RABBITMQ_HOME"; \
	\
# Remove unnecessary packages
	\
	apt-get remove --yes \
		gnupg \
		wget \
		xz-utils; \
	apt-get purge --yes --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	\
# verify assumption of no stale cookies
	[ ! -e "$RABBITMQ_DATA_DIR/.erlang.cookie" ]; \
	\
# Ensure RabbitMQ was installed correctly by running a few commands that do not depend on a running server, as the rabbitmq user
# If they all succeed, it's safe to assume that things have been set up correctly
	gosu rabbitmq rabbitmqctl help; \
	gosu rabbitmq rabbitmqctl list_ciphers; \
	gosu rabbitmq rabbitmq-plugins list; \
	\
# no stale cookies
	rm -f "$RABBITMQ_DATA_DIR/.erlang.cookie"; \
	\
# Enable Prometheus-style metrics by default (https://github.com/docker-library/rabbitmq/issues/419)
	gosu rabbitmq rabbitmq-plugins enable --offline rabbitmq_prometheus; \
	echo 'management_agent.disable_metrics_collector = true' > /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf; \
	chown rabbitmq:rabbitmq /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf; \
	\
# Added for backwards compatibility - users can simply COPY custom plugins to /plugins
	ln -sf /opt/rabbitmq/plugins /plugins; \
	\
# Check that OpenSSL still works
# Check that Erlang/OTP crypto & ssl were compiled against OpenSSL correctly
	openssl version; \
	erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'

# set home so that any `--user` knows where to put the erlang cookie
ENV HOME $RABBITMQ_DATA_DIR
# Hint that the data (a.k.a. home dir) dir should be separate volume
VOLUME $RABBITMQ_DATA_DIR

COPY --chown=rabbitmq:rabbitmq 10-defaults.conf /etc/rabbitmq/conf.d/
COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT ["docker-entrypoint.sh"]

EXPOSE 4369 5671 5672 15691 15692 25672
CMD ["rabbitmq-server"]
